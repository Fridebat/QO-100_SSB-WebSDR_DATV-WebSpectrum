/* Web based SDR Client for SDRplay
* =============================================================
* Author: DJ0ABR
*
*   (c) DJ0ABR
*   www.dj0abr.de
*
*   This program is free software; you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation; either version 2 of the License, or
*   (at your option) any later version.
*
*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with this program; if not, write to the Free Software
*   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
* 
* 
* wb_fft.c ... 
* 
* fft for wide spectrum
* 
*/

#include <fftw3.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <sys/time.h>

#include "qo100websdr.h"
#include "wf_univ.h"

void *wb_wf_proc(void *pdata);

#define WB_SRATE          SDR_SAMPLE_RATE               // full speed without decimation
#define WB_RESOLUTION     250                           // Hz per FFT value
#define WB_FFT_LENGTH     (WB_SRATE / WB_RESOLUTION)    // = 40.000

fftw_complex *wb_din = NULL;				// input data for  fft, output data from ifft
fftw_complex *wb_cpout = NULL;	            // ouput data from fft, input data to ifft
fftw_plan wb_plan = NULL;
int wb_din_idx = 0;


void init_fwb()
{
    char fn[300];
	sprintf(fn, "wb_wisom");	// wisdom file for each capture rate

	fftw_import_wisdom_from_filename(fn);
  
    wb_din   = (fftw_complex *)fftw_malloc(sizeof(fftw_complex) * WB_FFT_LENGTH);
	wb_cpout = (fftw_complex *)fftw_malloc(sizeof(fftw_complex) * WB_FFT_LENGTH);

    wb_plan = fftw_plan_dft_1d(WB_FFT_LENGTH, wb_din, wb_cpout, FFTW_FORWARD, FFTW_MEASURE);

    fftw_export_wisdom_to_filename(fn);
}

int cc = 0;

void wb_sample_processing(short *xi, short *xq, int numSamples)
{
    // copy the samples into the FFT input buffer
    for(int i=0; i<numSamples; i++)
    {
        wb_din[wb_din_idx][0] = xi[i];
		wb_din[wb_din_idx][1] = xq[i];
        wb_din_idx++;
        
        // check if the fft input buffer is filled
        if(wb_din_idx >= WB_FFT_LENGTH)
        {
            wb_din_idx = 0;
            
            // the buffer is full, now lets execute the fft
            fftw_execute(wb_plan);
            
            // this fft has generated WB_NUM_BINS (= 20.000) bins in wb_cpout
            double wfsamp[WF_WIDTH];
            int idx = 0;
            double real,imag;
            int wfbins;

            /*
             * the waterfall screen has 1500 pixels
             * the FFT generates Fmid to Fmid+5MHz followed by Fmid-5MHz to Fmid
             * so we get WB_FFT_LENGTH fft values (bins). In this case we get 40.000 values
             * 
             * the samplerate is 10MHz but the bandwidth is only 8MHz, so we can cut 1 MHz at the beginning and at the end
             * this results in 32000 usable bins.
             * Also we have to put this into 1500 pixels. For easy calculation we take not 32000 but only
             * 31.500 bins, which fits in 1500 pixels if we take every 21th value.
             * 
             * So we cut 4250 bins (1,0625 MHz) at the beginning and 4250 (1,0625 MHz)at the end.
             * The total width of the waterfall is now 10MHz - 2*1,0625MHz = 7,875 MHz, perfectly fine for the WB transponder
             * The base frequency Fmid should be on 10.495 GHz.
             * 
             */
            int picture_div = 21;
            int gaincorr = 1;
            
            for(wfbins=(WB_FFT_LENGTH/2+4250); wfbins<(WB_FFT_LENGTH); wfbins+=picture_div)
            {
                if(idx >= WF_WIDTH) break; // all wf pixels are filled
                
                
                wfsamp[idx] = -99999;
                for(int bin10=0; bin10<picture_div; bin10++)
                {
                    real = wb_cpout[wfbins+bin10][0];
                    imag = wb_cpout[wfbins+bin10][1];
                    double v = sqrt((real * real) + (imag * imag));
                    if(v > wfsamp[idx]) wfsamp[idx] = v;
                 }

                 // level correction
                 wfsamp[idx] /= gaincorr;

                idx++;
            }

            for(wfbins=0; wfbins<(WB_FFT_LENGTH/2-4250); wfbins+=picture_div)
            {
                if(idx >= WF_WIDTH) break; // all wf pixels are filled
                
                wfsamp[idx] = -99999;
                for(int bin10=0; bin10<picture_div; bin10++)
                {
                    real = wb_cpout[wfbins+bin10][0];
                    imag = wb_cpout[wfbins+bin10][1];
                    double v = sqrt((real * real) + (imag * imag));
                    if(v > wfsamp[idx]) wfsamp[idx] = v;
                 }

                 // level correction
                 wfsamp[idx] /= gaincorr;

                idx++;
            }
            
            // some smoothing
            for(int ni=1; ni < (idx-1); ni++)
            {
                wfsamp[ni] = (wfsamp[ni-1] + wfsamp[ni] + wfsamp[ni+1]) / 3;
            }
            
            drawWF(WFID_BIG,wfsamp, WF_WIDTH, WF_WIDTH, 1, TUNED_FREQUENCY, 7875000, 5250, DISPLAYED_FREQUENCY_KHZ, "\0");
        }
    }
}
